# Generated by Django 5.0.6 on 2025-01-20 05:59

import core.models.user
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0005_place_period_place_core_place_name_113002_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserAppRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='The name of the application role', max_length=100, verbose_name='name')),
            ],
            options={
                'verbose_name': 'app role',
                'verbose_name_plural': 'app roles',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Indicates if this instance is currently active', verbose_name='active')),
                ('blocked', models.BooleanField(db_index=True, default=False, verbose_name='blocked')),
                ('blocking_reason', models.SlugField(blank=True, choices=[('blocked', 'block_reason_general'), ('lack_of_payment', 'block_reason_payment'), ('verification_pending', 'block_reason_verification_pending')], null=True, verbose_name='Blocking Reason')),
                ('unblocking_reason', models.SlugField(blank=True, choices=[('payment', 'unblock_reason_payment'), ('temporal_unblock', 'unblock_reason_temporal_unblock')], null=True, verbose_name='Unblocking Reason')),
                ('payment_term', models.CharField(help_text='Payment terms for this organization', max_length=100, null=True, verbose_name='payment term')),
                ('payment_term_days', models.PositiveIntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)], verbose_name='payment term days')),
                ('type', models.CharField(choices=[('BUSINESS', 'org_type_business'), ('PERSON', 'org_type_person')], db_index=True, max_length=8, verbose_name='type')),
                ('orgcode', models.CharField(blank=True, db_index=True, help_text='example: probaar.co', max_length=45, unique=True, verbose_name='orgcode')),
                ('commercial_name', models.CharField(blank=True, max_length=100, verbose_name='commercial name')),
                ('legal_name', models.CharField(blank=True, db_index=True, max_length=100, verbose_name='legal name')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('country', django_countries.fields.CountryField(db_index=True, max_length=2, verbose_name='country')),
                ('document_type', models.CharField(choices=[('DNI', 'DNI'), ('RUC', 'RUC')], max_length=3, verbose_name='document type')),
                ('document_number', models.CharField(db_index=True, max_length=20, unique=True, verbose_name='document number')),
                ('date_creation', models.DateField(auto_now_add=True, db_index=True, verbose_name='date creation')),
                ('min_order_amount', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0)], verbose_name='min order amount')),
                ('days_before_blocking', models.PositiveIntegerField(default=3, validators=[django.core.validators.MinValueValidator(1)], verbose_name='days_before_blocking')),
                ('odoo_partner_id', models.IntegerField(blank=True, db_index=True, null=True, verbose_name='Odoo Partner ID')),
                ('cluster_odoo_id', models.IntegerField(blank=True, null=True, verbose_name='Cluster ID')),
                ('cluster_odoo_name', models.CharField(blank=True, max_length=100, null=True, verbose_name='Cluster Name')),
                ('default_shipping_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_shipping_organizations', to='core.address', verbose_name='default shipping address')),
                ('fiscal_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fiscal_organizations', to='core.address', verbose_name='fiscal address')),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['legal_name', 'first_name'],
            },
        ),
        migrations.AddField(
            model_name='place',
            name='org',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='places', to='core.organization', verbose_name='organization'),
        ),
        migrations.CreateModel(
            name='OrganizationMembership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('organization', models.ForeignKey(help_text='The organization this membership belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.organization', verbose_name='organization')),
            ],
            options={
                'verbose_name': 'organization membership',
                'verbose_name_plural': 'organization memberships',
                'ordering': ['organization', 'user'],
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Indicates if this instance is currently active', verbose_name='active')),
                ('name', models.CharField(db_index=True, max_length=50, verbose_name='name')),
                ('short_name', models.CharField(help_text='Abbreviated version of the unit name', max_length=10, verbose_name='short name')),
            ],
            options={
                'verbose_name': 'unit',
                'verbose_name_plural': 'units',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='core_unit_name_39d30f_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('gender', models.SlugField(blank=True, choices=[('male', 'male'), ('female', 'female'), ('other', 'other')], default='other', null=True, verbose_name='gender')),
                ('show_onboarding_modal', models.SlugField(choices=[('true', 'true'), ('false', 'false')], default='false', help_text='Controls visibility of the onboarding modal', verbose_name='show onboarding modal')),
                ('cellphone', models.CharField(blank=True, max_length=30, null=True, verbose_name='cellphone')),
                ('city', models.CharField(blank=True, db_index=True, max_length=100, null=True, verbose_name='city')),
                ('country', django_countries.fields.CountryField(blank=True, db_index=True, max_length=2, null=True, verbose_name='country')),
                ('token', models.CharField(blank=True, editable=False, help_text='Authentication token for password reset', max_length=40, null=True, verbose_name='token')),
                ('date_token', models.DateTimeField(blank=True, editable=False, null=True, verbose_name='token creation date')),
                ('last_date_view_banner', models.DateTimeField(blank=True, help_text='Tracks when the user last saw the banner', null=True, verbose_name='last view date of banner')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='core_user_set', related_query_name='core_user', to='auth.group', verbose_name='groups')),
                ('legacy_logged_org', models.ForeignKey(blank=True, help_text='Legacy field for storing the last logged organization', null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.organization', verbose_name='logged organization')),
                ('organizations', models.ManyToManyField(blank=True, help_text='Organizations this user belongs to', related_name='users', through='core.OrganizationMembership', to='core.organization', verbose_name='organizations')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='core_user_set', related_query_name='core_user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['first_name', 'username'],
            },
            managers=[
                ('objects', core.models.user.CustomUserManager()),
            ],
        ),
        migrations.AddField(
            model_name='organizationmembership',
            name='user',
            field=models.ForeignKey(help_text='The user who is a member of the organization', on_delete=django.db.models.deletion.CASCADE, related_name='organization_memberships', to='core.user', verbose_name='user'),
        ),
        migrations.AddField(
            model_name='organizationmembership',
            name='app_role',
            field=models.ForeignKey(blank=True, help_text='The role of the user within the organization', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='memberships', to='core.userapprole', verbose_name='role'),
        ),
        migrations.CreateModel(
            name='UserAppRolePermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('permission', models.CharField(db_index=True, help_text='The name of the permission', max_length=64, unique=True, verbose_name='permission')),
            ],
            options={
                'verbose_name': 'app role permission',
                'verbose_name_plural': 'app role permissions',
                'ordering': ['permission'],
                'indexes': [models.Index(fields=['permission'], name='core_userap_permiss_39812d_idx')],
            },
        ),
        migrations.AddField(
            model_name='userapprole',
            name='permissions',
            field=models.ManyToManyField(help_text='The permissions associated with this role', related_name='app_roles', to='core.userapprolepermission', verbose_name='permissions'),
        ),
        migrations.CreateModel(
            name='UserRestriction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField(help_text='The ID of the specific object being restricted', verbose_name='object ID')),
                ('content_type', models.ForeignKey(help_text='The type of object being restricted', on_delete=django.db.models.deletion.CASCADE, related_name='user_restrictions', to='contenttypes.contenttype', verbose_name='content type')),
                ('user', models.ForeignKey(help_text='The user this restriction applies to', on_delete=django.db.models.deletion.CASCADE, related_name='restrictions', to='core.user', verbose_name='user')),
            ],
            options={
                'verbose_name': 'user restriction',
                'verbose_name_plural': 'user restrictions',
                'ordering': ['user', 'content_type', 'object_id'],
            },
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['legal_name', 'first_name'], name='core_organi_legal_n_9d2642_idx'),
        ),
        migrations.AddIndex(
            model_name='organization',
            index=models.Index(fields=['type', 'document_number'], name='core_organi_type_f59e07_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['first_name', 'username'], name='core_user_first_n_501774_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='core_user_email_38052c_idx'),
        ),
        migrations.AddIndex(
            model_name='organizationmembership',
            index=models.Index(fields=['organization', 'user'], name='core_organi_organiz_af624f_idx'),
        ),
        migrations.AddIndex(
            model_name='organizationmembership',
            index=models.Index(fields=['user', 'app_role'], name='core_organi_user_id_4fcb9e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='organizationmembership',
            unique_together={('organization', 'user')},
        ),
        migrations.AddIndex(
            model_name='userapprole',
            index=models.Index(fields=['name'], name='core_userap_name_131ab0_idx'),
        ),
        migrations.AddIndex(
            model_name='userrestriction',
            index=models.Index(fields=['content_type', 'user'], name='core_userre_content_3cd171_idx'),
        ),
        migrations.AddIndex(
            model_name='userrestriction',
            index=models.Index(fields=['object_id'], name='core_userre_object__65d856_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='userrestriction',
            unique_together={('content_type', 'user', 'object_id')},
        ),
    ]
